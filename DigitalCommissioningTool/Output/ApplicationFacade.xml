<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApplicationFacade</name>
    </assembly>
    <members>
        <member name="T:ApplicationFacade.Application.GameManager">
            <summary>
            Zentrale Klasse fuer die Verwaltung und Anpassung aller Elemente.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.GameManager.OpenProjectData">
            <summary>
            Die Projekt Daten des geoffneten Projekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.GameManager.GameWarehouse">
            <summary>
            Das Lagerhaus der aktuellen Umgebung.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.GameManager.GameContainer">
            <summary>
            Die Containerklasse fuer die Handhabung der mobilen Regale.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.GameManager.PManager">
            <summary>
            Der Projektmanager zum Erstellen, speichern und Laden von Projekten.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.#cctor">
            <summary>
            Initiallisiert den GameManager.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.LoadProject(System.String)">
            <summary>
            Laedt ein Projekt in die Umgebung.
            </summary>
            <param name="name">Der Name des Projekts das geladen werden soll.</param>
            <returns>Gibt true zurueck wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.SaveProject(System.String)">
            <summary>
            Speichert das aktuell geoffnete Projekt.
            </summary>
            <param name="name">Der Name unter dem das Projekt gespeichert werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.CloseProject">
            <summary>
            Schliesst das aktuell Geoffnete Projekt.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.CreateProject(System.String,ApplicationFacade.Warehouse.WarehouseSize)">
            <summary>
            Erstellt ein neuens Projekt mit der angegebenen Lagerhaus groesse.
            </summary>
            <param name="name">Der Name des neuen Projekts.</param>
            <param name="size">Die Groesse des Lagerhauses.</param>
            <returns>Gibt true zurueck wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Application.GameManager.DeleteProject(System.String)">
            <summary>
            Loescht das Projekt mit dem angegebenen Namen.
            </summary>
            <param name="name">Der Name des Projekts das Geloescht werden soll.</param>
        </member>
        <member name="T:ApplicationFacade.Application.KeyData">
            <summary>
            Verwaltet Daten ueber Tastenkombinationen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyData.Code">
            <summary>
            Der KeyCode der Tasten.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyData.ShiftNeeded">
            <summary>
            Gibt an ob fuer die Tastenkombination Shift gedrueckt werden muss.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.KeyData.#ctor(UnityEngine.KeyCode,System.Boolean)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="code">Der KeyCode der zu drueckenden Taste.</param>
            <param name="shiftNeeded">Gibt an ob Shift gedrueckt werden muss.</param>
        </member>
        <member name="M:ApplicationFacade.Application.KeyData.Serialize(SystemTools.SerialConfigData)">
            <summary>
            Speichert Daten fuer die Serialisierung.
            </summary>
            <param name="storage">Objekt fuer die Datenspeicherung.</param>
        </member>
        <member name="M:ApplicationFacade.Application.KeyData.Restore(SystemTools.SerialConfigData)">
            <summary>
            Stellt die Serialisierten Daten wieder her.
            </summary>
            <param name="storage">Objekt aus dem die Daten wiederhergestellt werden koennen.</param>
        </member>
        <member name="M:ApplicationFacade.Application.KeyData.ToString">
            <summary>
            Wandelt die Tastenkombination in einen lesbaren String um.
            </summary>
            <returns>Gibt die Tastenkombination als String zurueck.</returns>
        </member>
        <member name="T:ApplicationFacade.Application.KeyManager">
            <summary>
            Verwaltet die Daten ueber belegte Tastenkombinationen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.Rotate">
            <summary>
            Taste fuer Objekt Rotation.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.RotateLeft">
            <summary>
            Taste fuer Objekt Rotation nach Links.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.RotateRight">
            <summary>
            Taste fuer Objekt Rotation nach Rechts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.MoveCameraUp">
            <summary>
            Taste um die Kamera nach oben zu Bewegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.MoveCameraDown">
            <summary>
            Taste um die Kamera nach unten zu Bewegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.MoveXAxis">
            <summary>
            Taste um Objekt an der X Achse zu Bewegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.MoveZAxis">
            <summary>
            Taste um Objekt an der Z Achse zu Bewegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.ChangeMode">
            <summary>
            Taste um zwischen den Modi durchzuwaechseln.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertStorageReck">
            <summary>
            Taste um ein Regal zu erstellen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertWall">
            <summary>
            Taste um eine Waend einzufuegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertWindow">
            <summary>
            Taste um ein Fenster einzufuegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertDoor">
            <summary>
            Taste um eine Tuer einzufuegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertGate">
            <summary>
            Taste um ein Tor einzufuegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.InsertItem">
            <summary>
            Taste um ein Item einzufuegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.RemoveSelected">
            <summary>
            Taste um das ausgewaehlte Objekt zu entfernen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.MoveSelected">
            <summary>
            Taste um das ausgewaehlte Objekt zu bewegen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.ToogleTimer">
            <summary>
            Taste um den Timer zu zu starten/stoppen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.ToogleMenu">
            <summary>
            Taste um Menü zu Öffnen/Schließen.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.KeyManager.#cctor">
            <summary>
            Laedt die standard Tastenbelegung.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.KeyManager.Keys">
            <summary>
            Gibt die Daten ueber alle verfuegbaren Tastenkombinationen zurueck.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.KeyManager.LoadKeyConfiguration">
            <summary>
            Laedt eine gespeicherte Tastenbelegung.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.KeyManager.SetDefault">
            <summary>
            Setzt die standard Tastenbelegung.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.KeyManager.SaveKeyConfiguration">
            <summary>
            Speichert die aktuelle Tastenbelegung.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectData">
            <summary>
            Enthaelt allgemeine Daten ueber ein Projekt.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectData.ProjectName">
            <summary>
            Der Name des Projekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectData.ProjectPath">
            <summary>
            Der Pfad des Projekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectData.DateCreated">
            <summary>
            Das Datum an dem das Projekt erstellt wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectData.DateModified">
            <summary>
            Das Datum an dem das Projekt zuletzt geaendert wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectData.Data">
            <summary>
            Objekt das von der Facade ueberdeckt wird.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectManager">
            <summary>
            Bietet Methoden zur Verwaltung von Projekten.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectManager.ProjectCreateEventHandler">
            <summary>
            Eventhandler für das Erstell Ereigniss.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectManager.ProjectLoadEventHandler">
            <summary>
            Eventhandler für Laden Ereignisse.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectManager.ProjectCloseEventHandler">
            <summary>
            Eventhandler für Schließ Ereignisse.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectManager.ProjectSaveEventHandler">
            <summary>
            Eventhandler für Speicher Ereignisse.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.ProjectCreated">
            <summary>
            Wird ausgelöst wenn ein neues Projekt erstellt wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.StartLoad">
            <summary>
            Wird ausgelöst wenn ein Projekt geladen wird.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.FinishLoad">
            <summary>
            Wird ausgelöst wenn ein Projekt fertig geladen wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.StartClose">
            <summary>
            Wird ausgelöst wenn ein Projekt geschlossen wird.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.FinishClose">
            <summary>
            Wird ausgelöst wenn ein Projekt geschlossen wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.StartSave">
            <summary>
            Wird ausgelöst wemm ein Projekt gespeichert wird.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Application.ProjectManager.FinishSave">
            <summary>
            Wird ausgelöst wenn ein Projekt fertig gespeichert wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.Data">
            <summary>
            Enthält die allgemeinen Daten des aktuell geöffneten Projekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.Settings">
            <summary>
            Enthält die Einstellungen des aktuell geöffneten Projekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.DHandler">
            <summary>
            Objekt das zum Speiuchern und Lesen der allgemeinen Projektdaten verwendet wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.SHandler">
            <summary>
            Objekt das zum Speichern und Lesen der Projekt Einstellungen verwendet wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.WHandler">
            <summary>
            Objekt das zum Speichern und Lesen des Lagerhauses verwendet wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.CHandler">
            <summary>
            Objekt das zum Speichern und Lesen der Container verwendet wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.IHandler">
            <summary>
            Objekt das zum Speichern und Lesen des Lagerbestandes verwendet wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.ProjectList">
            <summary>
            Gibt die allgemeinen Daten aller vorhandenen Projekte zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectManager.ProjectName">
            <summary>
            Gibt den Namen des aktuell geöffneten Projekts zurück.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.LoadProject(System.String,ApplicationFacade.Warehouse.Warehouse@,ApplicationFacade.Warehouse.Container@)">
            <summary>
            Lädt ein Projekt.
            </summary>
            <param name="name">Der Name des Projekts das geladen werden soll.</param>
            <param name="warehouse">Lagerhaus Objekt in das die Daten gelesen werden.</param>
            <param name="container">Container Objekt in das die</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.SaveProject(System.String,ApplicationFacade.Warehouse.Warehouse,ApplicationFacade.Warehouse.Container)">
            <summary>
            Speichert das aktuell geöffnete Projekt.
            </summary>
            <param name="name">Der Name unter dem das Projekt gespeichert werden soll.</param>
            <param name="warehouse">Das Lagerhaus das gespeichert werden soll.</param>
            <param name="container">Die Container die gespeichert werden sollen.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.CloseProject">
            <summary>
            Schließt das aktuell geöffnete Projekt.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.CreateProject(System.String,ApplicationFacade.Warehouse.WarehouseSize,ApplicationFacade.Warehouse.Warehouse@,ApplicationFacade.Warehouse.Container@)">
            <summary>
            Erstellt ein neues Projekt.
            </summary>
            <param name="name">Der Name des Projekts.</param>
            <param name="size">Die Größe des zu generierenden Lagerhauses.</param>
            <param name="warehouse">Das Lagerhaus das generiert wird.</param>
            <param name="container">Die Container die generiert werden.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.DeleteProject(System.String)">
            <summary>
            Löscht das Projekt mit dem gegebenen Namen
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.WriteProjectStock">
            <summary>
            Speichert den aktuellen Lagerbestand.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.WriteProjectData">
            <summary>
            Speichert die allgemeinen Projektdaten.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.WriteProjectSettings">
            <summary>
            Speichert die Projekteinstellungen.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.WriteProjectWarehouse(ApplicationFacade.Warehouse.Warehouse)">
            <summary>
            Speichert das Lagerhaus.
            </summary>
            <param name="warehouse">Objekt das alles aus dem Lagerhaus enthält was gespeichert werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.WriteProjectContainer(ApplicationFacade.Warehouse.Container)">
            <summary>
            Speichert die Container.
            </summary>
            <param name="container">Objekt das die Container enthält die gespeichert werden sollen.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.ReadProjectStock">
            <summary>
            Ließt den Lagerbestand aus der Projektdatei.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.ReadProjectData(ApplicationFacade.Application.ProjectData,ProjectComponents.Abstraction.InternalProjectData)">
            <summary>
            Ließt die allgemeinen Projektdaten aus der Datei.
            </summary>
            <param name="pData">Objekt in das die Daten gespeichert werden.</param>
            <param name="data">Objekt das gelesen wird.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.ReadProjectSettings(ProjectComponents.Abstraction.InternalProjectSettings)">
            <summary>
            Ließt die Projekt Einstellungen aus der Projektdatei.
            </summary>
            <param name="settings">Die Einstellungen die gelesen werden sollen.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.ReadProjectWarehouse(ProjectComponents.Abstraction.InternalProjectWarehouse@,ApplicationFacade.Warehouse.Warehouse@)">
            <summary>
            Ließt das Lagerhaus aus der Projektdatei.
            </summary>
            <param name="iwarehouse">Internes Objekt aus dem gelesen wird.</param>
            <param name="warehouse">Lagerhaus dem die gelesenen Daten hinzugefügt werden.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.ReadProjectContainer(ProjectComponents.Abstraction.InternalProjectContainer@,ApplicationFacade.Warehouse.Container@)">
            <summary>
            Ließt alle Container aus der Projektdatei.
            </summary>
            <param name="icontainer">Internes Objekt das gelesen wird.</param>
            <param name="container">Objekt in das die Container gespeichert werden.</param>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.GetDefaultWarehouse(AppData.Warehouse.IWarehouseStrategie)">
            <summary>
            Generiert das standard Lagerhaus.
            </summary>
            <param name="size">Das Objekt für die Generierung des Lagerhauses.</param>
            <returns>Das generierte Lagerhaus.</returns>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectManager.GetDefaultContainer">
            <summary>
            Erstellt die mobilen Regale für ein neues Projekt.
            </summary>
            <returns>Objekt mit den erstellten Containern.</returns>
        </member>
        <member name="T:ApplicationFacade.Application.ProjectSettings">
            <summary>
            Facade Objekt mit allen Projekteinstellungen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Application.ProjectSettings.Data">
            <summary>
            Objekt das überdeckt wird.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Application.ProjectSettings.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.Container">
            <summary>
            Speichert Informationen über alle Container in der Umgebung.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.Container.ContainerChangedEventHandler">
            <summary>
            Eventhandler für Create und Delete Events.
            </summary>
            <param name="storage">Das Regal welches mit dem Event in Verbindung gebracht werden kann.</param>
        </member>
        <member name="E:ApplicationFacade.Warehouse.Container.ContainerCreated">
            <summary>
            Wird ausgelöst wenn ein neues mobiles Regal erstellt wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Warehouse.Container.ContainerDeleted">
            <summary>
            Wird ausgeläst wenn ein mobiles Regal gelöscht wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Container.ContainerData">
            <summary>
            Liste mit allen mobilen Regalen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Container.Data">
            <summary>
            Internes Projektobjekt das für das Speichern der Container verantwortlich ist.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Container.StorageContainer">
            <summary>
            Gibt alle mobilen Regale zurueck.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.CreateContainer">
            <summary>
            Erstellt einen neuen Container am default Spawnpunkt.
            </summary>
            <returns>Objekt das den Container repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.CreateContainer(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt einen neuen Container.
            </summary>
            <param name="position">Die Position des Containers.</param>
            <param name="rotation">Die Rotation des Containers.</param>
            <param name="scale">Die Skalierung des Containres.</param>
            <returns>Objekt das den Container repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.AddContainer(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Fügt einen geladenen Container zur Containerverwaltung hinzu.
            </summary>
            <param name="container">Der geladene Container der Verwaltet werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.RemoveContainer(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Entfernt einen Container aus der Liste und der Umgebung.
            </summary>
            <param name="container">Der Container der Entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.GetContainer(System.Int64)">
            <summary>
            Gibt den Container mit der angegebenen ID zurück.
            </summary>
            <param name="id">Die ID des Containers.</param>
            <returns>Gibt den Container oder null zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.GetContainer(UnityEngine.GameObject)">
            <summary>
            Gibt den Container mit dem angegebenen GameObject zurück.
            </summary>
            <param name="obj">Das GameObject des Containers..</param>
            <returns>Gibt den Container oder null zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.DestroyContainer">
            <summary>
            Zerstört alle Container in der Umgebung.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.OnSContainerCreated(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Löst das ContainerCreated Event aus.
            </summary>
            <param name="data">Der Container der erstellt wurde.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Container.OnContainerDeleted(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Löst das ContainerDeleted Event aus.
            </summary>
            <param name="data">Der Container der gelöscht wurde.</param>
        </member>
        <member name="T:ApplicationFacade.Warehouse.DoorType">
            <summary>
            Bestimmt den Typ einer Tür.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.IDataIdentifier">
            <summary>
            Bietet ein einheitliches Interface für Objekte die eindeutig Identifizierbar sein sollen.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.IDataIdentifier.SetID(System.Int64)">
            <summary>
            Ändert die ID.
            </summary>
            <param name="id">Die neue ID.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.IDataIdentifier.GetID">
            <summary>
            Gibt die gespeichert ID zurück.
            </summary>
            <returns>Die gespeichert ID.</returns>
        </member>
        <member name="T:ApplicationFacade.Warehouse.WallClass">
            <summary>
            Gibt die Kategorie eines Wandobjekts an.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.WallFace">
            <summary>
            Gibt die Ausrichtung eines Wandobjekts an.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.WarehouseSize">
            <summary>
            Gibt an welche Lagerhaus größe generiert werden soll.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.DoorData">
            <summary>
            Stellt eine Tür in der Umgebung dar.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.DoorData.Type">
            <summary>
            Die Türart.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.DoorData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.DoorData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.DoorData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.DoorData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.DoorData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn sich das Objekt ändert und speichert die Änderungen.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.FloorData">
            <summary>
            Stellt einen Boden in der Umgebung dar.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.FloorData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.FloorData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.FloorData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.FloorData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.FloorData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn sich das Objekt ändert und speichert die Änderungen.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.GameObjectData">
            <summary>
            Stellt ein Objekt in der Umgebung dar.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Position">
            <summary>
            Die Position des Objekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Rotation">
            <summary>
            Die Rotation des Objekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Scale">
            <summary>
            Die Skalierung des Objekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Object">
            <summary>
            Das GameObjekt das repräsentiert wird.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Destroyed">
            <summary>
            Gibt an ob das Objekt zerstört wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.Readonly">
            <summary>
            Gibt an ob das Objekt Schreibgeschützt ist.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.GameObjectData.ID">
            <summary>
            Die ID des Objekts.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetTag(System.String)">
            <summary>
            Ändert den Tag des GameObjects.
            </summary>
            <param name="tag">Der neue Tag.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetPosition(UnityEngine.Vector3)">
            <summary>
            Ändert die Position des GameObjects.
            </summary>
            <param name="position">Die neue Position.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetRotation(UnityEngine.Quaternion)">
            <summary>
            Ändert die Rotation des GameObjects.
            </summary>
            <param name="rotation">Die Rotation des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetScale(UnityEngine.Vector3)">
            <summary>
            Ändert die Skalierung des GameObjekcs.
            </summary>
            <param name="scale">Die neue Skalierung.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetTransform(UnityEngine.Transform)">
            <summary>
            Ändert die Transformationsdaten des GameObjects.
            </summary>
            <param name="transform">Die neuen Transformationsdaten.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.ChangeGameObject(UnityEngine.GameObject)">
            <summary>
            Änder das GameObject.
            </summary>
            <param name="obj">Das neue GameObject.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.Destroy">
            <summary>
            Zerstört das GameObject.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.SetID(System.Int64)">
            <summary>
            Speichert eine neue ID.
            </summary>
            <param name="id">Die neue ID.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.GetID">
            <summary>
            Gibt die gespeicherte ID zurück.
            </summary>
            <returns>Die gespeicherte ID.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn das Objekt verändert wurde.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.IsReadonly">
            <summary>
            Überprüft ob das Objekt schreibgeschützt ist.
            </summary>
            <returns>True wenn Schreibgeschützt.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.GameObjectData.IsDestroyed">
            <summary>
            Überprüft ob das Objekt bereits Zerstört wurde.
            </summary>
            <returns>True wenn das Objekt bereits Zerstört ist.</returns>
        </member>
        <member name="T:ApplicationFacade.Warehouse.ItemData">
            <summary>
            Stellt ein Item auf einem Regal in der Umgebung dar.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.ItemData.StockChangedEventHandler">
            <summary>
            EventHandler für das StockChanged Event.
            </summary>
            <param name="item">Das betroffene Item.</param>
        </member>
        <member name="T:ApplicationFacade.Warehouse.ItemData.ItemChangedEventHandler">
            <summary>
            EventHandler für das ItemChanged Event.
            </summary>
            <param name="item">Das betroffene Item.</param>
        </member>
        <member name="E:ApplicationFacade.Warehouse.ItemData.StockChanged">
            <summary>
            Wird ausgelöst wenn der Lagerbestand veändert wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Warehouse.ItemData.ItemChanged">
            <summary>
            Wird ausgelöst wenn ein Item veändert wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.Count">
            <summary>
            Die Anzahl des Items.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.Weight">
            <summary>
            Das Gewicht des Items.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.Name">
            <summary>
            Der Name des Items.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.ParentStorage">
            <summary>
            Das Regal auf dem das Item liegt.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.IsRoot">
            <summary>
            Gibt an ob die Item Instanz die Wurzel des Baumes ist.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.ParentItem">
            <summary>
            Das Item von dem dieses Item eine Teilmenge ist.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.ChildItems">
            <summary>
            Die Kinder des aktuellen Items.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.IDRef">
            <summary>
            Die ID Referenz des Items.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.ItemStock">
            <summary>
            Eine Liste mit dem Lagerbestand.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.GetStock">
            <summary>
            Gibt den Lagerbestand zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.StockCount">
            <summary>
            Gibt den kompletten Lagerbestand des Items zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.ItemData.IsStockItem">
            <summary>
            Gibt an ob das Objekt eine Wurzel im Baum ist.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.#cctor">
            <summary>
            Erstellt den Lagerbestand.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.Finalize">
            <summary>
            Zerstört das Objekt.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Items.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.IncreaseItemCount(System.Int32)">
            <summary>
            Erhöt die Anzahl des Items.
            </summary>
            <param name="itemCount">Die Anzahl um die die Teilmenge erhöt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.DecreaseItemCount(System.Int32)">
            <summary>
            Verringert die Anzahl des Items.
            </summary>
            <param name="itemCount">Die Anzahl um die die Teilmenge verringert werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.SetItemName(System.String)">
            <summary>
            Ändert den Namen des Items.
            </summary>
            <param name="itemName">Der neue Name.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.SetItemWeight(System.Double)">
            <summary>
            Verändert das Gewicht des Items.
            </summary>
            <param name="itemWeight">Das neue Gewicht.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RequestItem(System.Int32)">
            <summary>
            Frägt eine Teilmenge aus dem Item ab.
            </summary>
            <param name="count">Die Anzahl der Teilmenge die Abgefragt werden soll.</param>
            <returns>Ein Item mit der Teilmenge.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RequestCopyItem(System.Int32)">
            <summary>
            Frägt eine Teilmenge aus dem Item ab und klont das GameObject.
            </summary>
            <param name="count">Die Anzahl der Teilmenge die Abgefragt werden soll.</param>
            <returns>Ein Item mit der Teilmenge.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RequestCopyItem(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Frägt eine Teilmenge aus dem Item ab und klont das GameObject.
            </summary>
            <param name="count">Die Anzahl der Teilmenge die Abgefragt werden soll.</param>
            <param name="position">Die Position des geklonten Objekts.</param>
            <param name="rotation">Die Rotation des geklonten Objekts.</param>
            <returns>Ein Item mit der Teilmenge.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.ReturnItem">
            <summary>
            Die Teilmenge wird wieder zum Parent hinzugefügt.
            </summary>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.AddItemToStock(System.String,System.Double)">
            <summary>
            Fügt ein Item zum Lagerbestand hinzu.
            </summary>
            <param name="name">Der Name des Items.</param>
            <param name="weight">Das Gewicht des Items.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.AddItemToStock(System.Int64,System.String,System.Int32,System.Double)">
            <summary>
            Fügt ein Item zum Lagerbestand hinzu.
            </summary>
            <param name="id">Die ID des Items.</param>
            <param name="name">Der Name des Items.</param>
            <param name="count">Die Anzahl des Items.</param>
            <param name="weight">Das Gewicht des Items.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RemoveItemFromStock(ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Entfernt das Item vom Lagerbestand.
            </summary>
            <param name="item">Das Item das Entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RemoveItemFromStock(System.Int64)">
            <summary>
            Entfernt das Item vom Lagerbestand.
            </summary>
            <param name="idRef">Die ID des Items das entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RemoveItemFromStock(System.String)">
            <summary>
            Entfernt das Item vom Lagerbestand.
            </summary>
            <param name="name">Der Name des Items das Entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.StockContainsItem(System.String)">
            <summary>
            Überprüft ob der Lagerbestand ein Item enthält.
            </summary>
            <param name="name">Der Name des Items das gesucht werden soll.</param>
            <returns>Gibt true zurück wenn das Item existiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.StockContainsItem(System.Int64)">
            <summary>
            Überprüft ob der Lagerbestand ein Item enthält.
            </summary>
            <param name="idRef">Die IDReferenz des Items das gesucht werden soll.</param>
            <returns>Gibt true zurück wenn das Item existiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RequestStockItem(System.String)">
            <summary>
            Frägt ein Item aus dem Lagerbestand ab.
            </summary>
            <param name="Name">Der Name des Items das abgefragt werden soll.</param>
            <returns>Gibt das Item zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.SetParentStorage(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Ändert das Eltern Regal dem das Item zugewiesen ist.
            </summary>
            <param name="storage">Das Regal das als Parent gesetzt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.RemoveStockItem(ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Entfernt ein Item aus dem Lagerbestand rekursiv.
            </summary>
            <param name="data">Das Item das entfernt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.ObjectChanged(ApplicationFacade.Warehouse.ItemData,ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Wird aufgerufen wenn ein Item geändert wurde und ändert den kompletten hierarchie Baum rekursiv ab.
            </summary>
            <param name="src">Das Item mit den änderungen.</param>
            <param name="item">Das Item das geändert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.ItemData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn ein Item geändert wird.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.StorageData">
            <summary>
            Repräsentiert ein Regal in der Umgebung.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.StorageData.IsContainer">
            <summary>
            Gibt an ob das Regal ein Container ist.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.StorageData.SlotCount">
            <summary>
            Die Anzahl der Slots.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.StorageData.Data">
            <summary>
            Die Items von dem Container.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.StorageData.Slots">
            <summary>
            Die Kisten Objekte von dem Regal.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.StorageData.GetItems">
            <summary>
            Gibt die Items von dem Regal zurück.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Regals.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Regals.</param>
            <param name="position">Die Position des Regals.</param>
            <param name="rotation">Die Rotation des Regals.</param>
            <param name="scale">Die Skalierung des Regals.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Regals.</param>
            <param name="position">Die Position des Regals.</param>
            <param name="rotation">Die Rotation des Regals.</param>
            <param name="scale">Die Skalierung des Regals.</param>
            <param name="obj">Das GameObject des Regals.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.GetItem(System.Int32)">
            <summary>
            Gibt das Item aus dem angegebenen Slot zurück.
            </summary>
            <param name="slot">Der Slot des Items.</param>
            <returns>Gibt das Item zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.GetItem(System.Int64)">
            <summary>
            Gibt das Item zurück mit der angegebenen ID.
            </summary>
            <param name="id">Die ID des Items.</param>
            <returns>Gibt das Item mit der passenden ID zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.GetItem(UnityEngine.GameObject)">
            <summary>
            Gibt das Item zurück mit dem angegebenen GameObject.
            </summary>
            <param name="obj">Das GameObject nach dem gesucht werden soll.</param>
            <returns>Gibt das Item mit dem passenden GameObject zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.GetSlot(UnityEngine.GameObject)">
            <summary>
            Gibt den Slot zurück auf dem das Item mit dem passenden GameObject abgelegt wurde.
            </summary>
            <param name="obj">Das GameObject das gesucht werden soll.</param>
            <returns>Gibt die Nummer des Slots zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.GetSlot(ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Gibt den Slot zurück auf dem das Item abgelegt wurde.
            </summary>
            <param name="item">Das Item dessen Slot gesucht werden soll.</param>
            <returns>Gibt die Nummer des Slots zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.AddItem(ApplicationFacade.Warehouse.ItemData,System.Int32)">
            <summary>
            Legt ein Item auf das Regal.
            </summary>
            <param name="item">Das Item das auf das Regal gelegt werden soll.</param>
            <param name="slot">Der Slot auf dem das Item abgelegt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.AddItem(ApplicationFacade.Warehouse.ItemData,ApplicationFacade.Warehouse.Warehouse@,System.Int32)">
            <summary>
            Legt ein Item auf das Regal.
            </summary>
            <param name="item">Das Item das auf das Regal gelegt werden soll.</param>
            <param name="warehouse">Das Lager in dem die änderungen gespeichert werden sollen.</param>
            <param name="slot">Der Slot auf dem das Item gelegt wird.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.RemoveItem(ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Entfernt ein Item von dem Regal.
            </summary>
            <param name="item">Das Item das Entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.ContainsItem(ApplicationFacade.Warehouse.ItemData)">
            <summary>
            Überprüft ob ein Item auf dem Regal liegt.
            </summary>
            <param name="item">Das Item nach dem gesucht werden soll.</param>
            <returns>Gibt true zurück wenn das Regal das Item enthält.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.Destroy">
            <summary>
            Zerstört das Objekt.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.ChangeSlotCount(AppData.Warehouse.ISlotCalcStrategie)">
            <summary>
            Ändert die Anzahl der Slots.
            </summary>
            <param name="strategie">Der Algorithmus der für die Berechnung der Slots verwendet werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.StorageData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn das Objekt verändert wurde um die Änderungen zu Speichern.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn sich das Objekt ändert und speichert die Änderungen.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.WallObjectData">
            <summary>
            Abstraktion für Wände, Fenster und Türen.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.WallObjectData.Face">
            <summary>
            Ausrichtung des Objekts.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.WallObjectData.Class">
            <summary>
            Kategorie des Objekts.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.SetFace(ApplicationFacade.Warehouse.WallFace)">
            <summary>
            Ändert die Ausrichtung des Objekts.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.SetClass(ApplicationFacade.Warehouse.WallClass)">
            <summary>
            Ändert die Kategorie des Objekts.
            </summary>
            <param name="wClass"></param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WallObjectData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn sich das Objekt ändert und speichert die Änderungen.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.WindowData">
            <summary>
            Stellt ein Fenster in der Umgebung dar.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WindowData.#ctor">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WindowData.#ctor(System.Int64)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WindowData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WindowData.#ctor(System.Int64,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.GameObject)">
            <summary>
            Erstellt eine neue Instanz.
            </summary>
            <param name="id">Die ID des Objekts.</param>
            <param name="position">Die Position des Objekts.</param>
            <param name="rotation">Die Rotation des Objekts.</param>
            <param name="scale">Die Skalierung des Objekts.</param>
            <param name="obj">Das GameObjekt das repräsentiert wird.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.WindowData.ObjectChanged">
            <summary>
            Wird aufgerufen wenn sich das Objekt ändert und speichert die Änderungen.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.Warehouse">
            <summary>
            Stellt ein Lagerhaus in der 3D-Umgebung dar.
            </summary>
        </member>
        <member name="T:ApplicationFacade.Warehouse.Warehouse.StorageRackModifiedEventHandler">
            <summary>
            EventHandler Definition für StorageRack events.
            </summary>
            <param name="data">Das Regal das verändert wurde.</param>
        </member>
        <member name="E:ApplicationFacade.Warehouse.Warehouse.StorageRackCreated">
            <summary>
            Event das ausgelöst wird, wenn ein Regal erstellt wurde.
            </summary>
        </member>
        <member name="E:ApplicationFacade.Warehouse.Warehouse.StorageRackDeleted">
            <summary>
            Event das ausgelöst wird, wenn ein Regal entfernt wurde.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.ObjectSpawn">
            <summary>
            Objekt das eine Position vorgibt an dem die neue Objekte gespawnt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.NorthWall">
            <summary>
            Enthält alle Objekte aus der Nordwand.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.EastWall">
            <summary>
            Enthält alle Objekte aus der Ostwand.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.SouthWall">
            <summary>
            Enthält alle Objekte aus der Südwand.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.WestWall">
            <summary>
            Enthält alle Objekte aus der Westwand.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.Floor">
            <summary>
            Enthält alle Böden die aktuell in der Umgebung dargestellt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.Walls">
            <summary>
            Enthält alle Wände die aktuell in der Umgebung dargestellt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.Windows">
            <summary>
            Enthält alle Fenster die aktuell in der Umgebung dargestellt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.Doors">
            <summary>
            Enthält alle Türen die aktuell in der Umgebung dargestellt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.StorageRackList">
            <summary>
            Enthält alle Lagerregale die aktuell in der Umgebung dargestellt werden.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.Data">
            <summary>
            Interne Struktur die alle Objekte protokolliert.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.StorageRacks">
            <summary>
            Gibt alle Regal Objekte die aktuell im Lagerhaus stehen zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.NorthWallObjects">
            <summary>
            Gibt alle Objekte aus der Nordwand zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.EastWallObjects">
            <summary>
            Gibt alle Objekte aus der Ostwand zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.SouthWallObjects">
            <summary>
            Gibt alle Objekte aus der Südwand zurück.
            </summary>
        </member>
        <member name="P:ApplicationFacade.Warehouse.Warehouse.WestWallObjects">
            <summary>
            Gibt alle Objekte aus der Westwand zuück.
            </summary>
        </member>
        <member name="F:ApplicationFacade.Warehouse.Warehouse.Destroyed">
            <summary>
            Gibt an ob das Lager zerstört wurde.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.#ctor">
            <summary>
            Erstellt eine neue Instanz und initialisiert alle Objekte.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateFloor">
            <summary>
            Erstellt einen Boden an dem Objektspawn.
            </summary>
            <returns>Ein <see cref="T:ApplicationFacade.Warehouse.FloorData"/> Objekt, dass den Boden er erstellt wurde darstellt.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateFloor(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt einen Boden an der gegebenen Position.
            </summary>
            <param name="position">Die Position an der der Boden erstellt wird.</param>
            <param name="rotation">Die Rotation des Bodens.</param>
            <param name="scale">Die Skalierung des Bodens.</param>
            <returns>Ein <see cref="T:ApplicationFacade.Warehouse.FloorData"/> Objekt, dass den Boden er erstellt wurde darstellt.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.AddFloor(ApplicationFacade.Warehouse.FloorData)">
            <summary>
            Fügt einen Boden zur Protokollierung hinzu und stellt diesen in der Umgebung dar.
            </summary>
            <param name="floor">Der Boden der Protokolliert und dargestellt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.RemoveFloor(ApplicationFacade.Warehouse.FloorData)">
            <summary>
            Zerstört den angegebenen Boden und entfernt diesen aus der Umgebung.
            </summary>
            <param name="floor">Der Boden der zerstört werden soll.</param>
            <returns>Gibt true zurück wenn der Boden erfolgreich gefunden und entfernt wurde.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetFloor(System.Int64)">
            <summary>
            Gibt den Boden mit der angegebenen ID zurück.
            </summary>
            <param name="id">Die ID des Bodens.</param>
            <returns>Der Boden mit der ID oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetFloor(UnityEngine.GameObject)">
            <summary>
            Gibt den Boden mit dem angegebenen GameObject zurück
            </summary>
            <param name="obj">Das Objekt eines Bodens.</param>
            <returns>Der Boden mit dem GameObjekt oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWall(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,ApplicationFacade.Warehouse.WallFace,ApplicationFacade.Warehouse.WallClass)">
            <summary>
            Erstellt eine Wand mit den angegebenen Eigenschaften.
            </summary>
            <param name="position">Die Position der Wand.</param>
            <param name="rotation">Die Rotation der Wand.</param>
            <param name="scale">Die Skalierung der Wand.</param>
            <param name="face">Die Ausrichtung der Wand.</param>
            <param name="wClass">Gibt an ob die Wand das Lagerhaus oder einen internen Raum definiert.</param>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.WallData"/> Objekt das die Wand repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWall(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,ApplicationFacade.Warehouse.WallFace,ApplicationFacade.Warehouse.WallClass,System.String)">
            <summary>
            Erstellt eine Wand mit den angegebenen Eigenschaften.
            </summary>
            <param name="position">Die Position der Wand.</param>
            <param name="rotation">Die Rotation der Wand.</param>
            <param name="scale">Die Skalierung der Wand.</param>
            <param name="face">Die Ausrichtung der Wand.</param>
            <param name="wClass">Gibt an ob die Wand das Lagerhaus oder einen internen Raum definiert.</param>
            <param name="tag">Der Tag den das GameObjekt bekommen soll</param>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.WallData"/> Objekt das die Wand repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.AddWall(ApplicationFacade.Warehouse.WallData,System.String)">
            <summary>
            Fügt ein Wandobjekt zur Lagerhalle hinzu.
            </summary>
            <param name="wall">Das Objekt das die Wand repräsentiert.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.RemoveWall(ApplicationFacade.Warehouse.WallData)">
            <summary>
            Entfernt die angegebene Wand.
            </summary>
            <param name="wall">Die Wand die entfernt werden soll.</param>
            <returns>Gibt true zurück wenn erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetWall(System.Int64)">
            <summary>
            SUcht ein Wand Objekt anhand der gegebenen ID.
            </summary>
            <param name="id">Die ID des Wand Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.WallData"/> Objekt das die Wand repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetWall(UnityEngine.GameObject)">
            <summary>
            SUcht ein Wand Objekt anhand des GameObjects.
            </summary>
            <param name="obj">Das GameObject der Wand.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.WallData"/> Objekt das die Wand repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWindow">
            <summary>
            Erstellt ein neues Fenster am default Spawnpunkt.
            </summary>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.WindowData"/> Objekt dass das Fenster repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWindow(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,ApplicationFacade.Warehouse.WallFace,ApplicationFacade.Warehouse.WallClass)">
            <summary>
            Erstellt ein neues Fenster mit den angegebenen Eigenschaften.
            </summary>
            <param name="position">Die Position des Fensters.</param>
            <param name="rotation">Die Rotation des Fensters.</param>
            <param name="scale">Die Skalierung des Fensters.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.WindowData"/> Objekt zurück dass das Fenster repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.AddWindow(ApplicationFacade.Warehouse.WindowData)">
            <summary>
            Fügt ein Fenster Objekt zur Lagerhalle hinzu.
            </summary>
            <param name="window">Das Fenster das hinzugefügt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.RemoveWindow(ApplicationFacade.Warehouse.WindowData)">
            <summary>
            Entfernt das angegebene Fenster.
            </summary>
            <param name="window">Das Fenster das entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetWindow(System.Int64)">
            <summary>
            SUcht ein Fenster Objekt anhand der gegebenen ID.
            </summary>
            <param name="id">Die ID des Fenster Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.WindowData"/> Objekt das das Fenster repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetWindow(UnityEngine.GameObject)">
            <summary>
            SUcht ein Fenster Objekt anhand des GameObjects.
            </summary>
            <param name="obj">Das GameObject des Fenster Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.WindowData"/> Objekt das das Fenster repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateDoor(ApplicationFacade.Warehouse.DoorType)">
            <summary>
            Erstellt eine neue Tür am default Spawnpunkt.
            </summary>
            <param name="type">Die Türart.</param>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.DoorData"/> Objekt dass die Tür repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateDoor(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3,ApplicationFacade.Warehouse.DoorType,ApplicationFacade.Warehouse.WallFace,ApplicationFacade.Warehouse.WallClass)">
            <summary>
            Erstellt eine neue Tür mit den angegebenen Eigenschaften.
            </summary>
            <param name="position">Die Position der Tür.</param>
            <param name="rotation">Die Rotation der Tür.</param>
            <param name="scale">Die Skalierung der Tür.</param>
            <param name="type">Die Türart.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.DoorData"/> Objekt zurück dass die Tür repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.AddDoor(ApplicationFacade.Warehouse.DoorData)">
            <summary>
            Fügt ein Tür Objekt zur Lagerhalle hinzu.
            </summary>
            <param name="door">Die Tür die hinzugefügt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.RemoveDoor(ApplicationFacade.Warehouse.DoorData)">
            <summary>
            Entfernt die angegebene Tür.
            </summary>
            <param name="door">Die Tür die entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetDoor(System.Int64)">
            <summary>
            SUcht ein Tür Objekt anhand der gegebenen ID.
            </summary>
            <param name="id">Die ID des Tür Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.DoorData"/> Objekt das die Tür repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetDoor(UnityEngine.GameObject)">
            <summary>
            SUcht ein Tür Objekt anhand des GameObjects.
            </summary>
            <param name="obj">Das GameObject des Tür Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.DoorData"/> Objekt das die Tür repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateStorageRack">
            <summary>
            Erstellt ein neues Regal am default Spawnpunkt.
            </summary>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.StorageData"/> Objekt das das Regal repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateStorageRack(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Erstellt ein neues Regal mit den angegebenen Eigenschaften.
            </summary>
            <param name="position">Die Position des Regals.</param>
            <param name="rotation">Die Rotation des Regals</param>
            <param name="scale">Die Skalierung desRegals.</param>
            <returns>Das <see cref="T:ApplicationFacade.Warehouse.StorageData"/> Objekt das das Regal repräsentiert.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.AddStorageRack(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Fügt ein Regal Objekt zur Lagerhalle hinzu.
            </summary>
            <param name="storage">Das Regal das hinzugefügt werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.RemoveStorageRack(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Entfernt das angegebene Regal.
            </summary>
            <param name="storage">Das Regal das entfernt werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetStorageRack(System.Int64)">
            <summary>
            SUcht ein Regal Objekt anhand der gegebenen ID.
            </summary>
            <param name="id">Die ID des Regal Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.StorageData"/> Objekt das das Regal repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetStorageRack(UnityEngine.GameObject)">
            <summary>
            SUcht ein Regal Objekt anhand des GameObjects.
            </summary>
            <param name="obj">Das GameObject des Regal Objekts.</param>
            <returns>Gibt das <see cref="T:ApplicationFacade.Warehouse.StorageData"/> Objekt das das Regal repräsentiert zurück oder null.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetStorageRackItem(ApplicationFacade.Warehouse.StorageData,UnityEngine.GameObject)">
            <summary>
            Sucht anhand des <see cref="T:UnityEngine.GameObject"/> ein Regalitem.
            </summary>
            <param name="obj">Das <see cref="T:UnityEngine.GameObject"/> mit dem gesucht wird.</param>
            <param name="storage">Das Regal in dem das Item gesucht werden soll.</param>
            <returns>Gibt das passende Item oder null zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetStorageRackItem(UnityEngine.GameObject)">
            <summary>
            Sucht anhand des <see cref="T:UnityEngine.GameObject"/> ein Regalitem.
            </summary>
            <param name="obj">Das <see cref="T:UnityEngine.GameObject"/> mit dem gesucht wird.</param>
            <returns>Gibt das passende Item oder null zurück.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyWarehouse">
            <summary>
            Zerstört alle Lagerhaus Objekte in der Umgebung.
            </summary>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.GetUniqueID(ApplicationFacade.Warehouse.IDataIdentifier[])">
            <summary>
            Erzeugt eine für die Objektgruppe eindeutige ID.
            </summary>
            <param name="idUsed">Enthält alle IDs die bereits in der Objektgruppe vorhanden sind.</param>
            <returns>Eine für die Objektgruppe eindeutige ID.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateFloorObject(ApplicationFacade.Warehouse.FloorData)">
            <summary>
            Erstellt ein Tür Objekt und lädt es in die Umgebung.
            </summary>
            <param name="data">Das Objekt das in die Umgebung geladen werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyFloorObject(ApplicationFacade.Warehouse.FloorData)">
            <summary>
            Zerstört ein Boden Objekt und entfernt es aus der Umgebung.
            </summary>
            <param name="data">Das Objekt das Zerstört werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWallObject(ApplicationFacade.Warehouse.WallData,System.String)">
            <summary>
            Erstellt ein Wand Objekt und lädt es in die Umgebung.
            </summary>
            <param name="data">Das Objekt das in die Umgebung geladen werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyWallObject(ApplicationFacade.Warehouse.WallData)">
            <summary>
            Zerstört ein Wand Objekt und entfernt es aus der Umgebung.
            </summary>
            <param name="data">Das Objekt das Zerstört werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateWindowObject(ApplicationFacade.Warehouse.WindowData)">
            <summary>
            Erstellt ein Fenster Objekt und lädt es in die Umgebung.
            </summary>
            <param name="data">Das Objekt das in die Umgebung geladen werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyWindowObject(ApplicationFacade.Warehouse.WindowData)">
            <summary>
            Zerstört ein Fenster Objekt und entfernt es aus der Umgebung.
            </summary>
            <param name="data">Das Objekt das Zerstört werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateDoorObject(ApplicationFacade.Warehouse.DoorData)">
            <summary>
            Erstellt ein Tür Objekt und lädt es in die Umgebung.
            </summary>
            <param name="data">Das Objekt das in die Umgebung geladen werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyDoorObject(ApplicationFacade.Warehouse.DoorData)">
            <summary>
            Zerstört ein Tür Objekt und entfernt es aus der Umgebung.
            </summary>
            <param name="data">Das Objekt das Zerstört werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.CreateStorageRackObject(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Erstellt ein Regal Objekt und lädt es in die Umgebung.
            </summary>
            <param name="data">Das Objekt das in die Umgebung geladen werden soll.</param>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.DestroyStorageRackObject(ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Zerstört ein Regal Objekt und entfernt es aus der Umgebung.
            </summary>
            <param name="data">Das Objekt das Zerstört werden soll.</param>
            <returns>Gibt true zurück wenn Erfolgreich.</returns>
        </member>
        <member name="M:ApplicationFacade.Warehouse.Warehouse.OnStorageRackModified(System.Int32,ApplicationFacade.Warehouse.StorageData)">
            <summary>
            Wird aufgerufen wenn ein Regal hinzugefügt oder entfernt wurde und löst das passende Event aus.
            </summary>
            <param name="mode">Gibt an ob ein Regal hinzugefügt oder entfernt wurde. 0 = Hinzugefügt, !0 = Entfernt</param>
            <param name="data">Das betroffene Regal.</param>
        </member>
    </members>
</doc>
